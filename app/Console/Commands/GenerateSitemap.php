<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Spatie\Sitemap\Sitemap;
use Spatie\Sitemap\Tags\Url;
use App\Models\Product;

class GenerateSitemap extends Command
{
    protected $signature = 'sitemap:generate';
    protected $description = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è sitemap.xml –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤';

    public function handle()
    {
        $this->info('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é sitemap...');

        $sitemap = Sitemap::create();
        $locales = ['ru', 'ro', 'en'];

        // 1. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        foreach ($locales as $locale) {
            $sitemap->add(
                Url::create("/{$locale}")
                    ->setPriority(1.0)
                    ->setChangeFrequency(Url::CHANGE_FREQUENCY_DAILY)
                    ->setLastModificationDate(now())
            );
        }
        $this->info('‚úì –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');

        // 2. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        $staticPages = ['about', 'contact'];

        foreach ($staticPages as $page) {
            foreach ($locales as $locale) {
                $sitemap->add(
                    Url::create("/{$locale}/{$page}")
                        ->setPriority(0.8)
                        ->setChangeFrequency(Url::CHANGE_FREQUENCY_MONTHLY)
                );
            }
        }
        $this->info('‚úì –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // 3. –¢–æ–≤–∞—Ä—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        $products = Product::with(['translations', 'images'])
            ->where('is_active', true)
            ->get();

        $this->info("–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: " . $products->count());

        $productCount = 0;
        $productWithImagesCount = 0; // üî• –°—á—ë—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ

        foreach ($products as $product) {
            foreach ($locales as $locale) {
                $translation = $product->translations
                    ->where('language', $locale)
                    ->first();

                if ($translation && $translation->slug) {
                    // –°–æ–∑–¥–∞—ë–º URL —Ç–æ–≤–∞—Ä–∞
                    $url = Url::create("/{$locale}/product/{$translation->slug}")
                        ->setPriority(0.6)
                        ->setChangeFrequency(Url::CHANGE_FREQUENCY_WEEKLY)
                        ->setLastModificationDate($product->updated_at);

                    // üî• –§–ò–õ–¨–¢–†–£–ï–ú: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (–Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ)
                    $mainImage = $product->images()
                        ->where('is_main', true)
                        ->first()
                        ?? $product->images()->orderBy('sort_order')->first();

                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                    if ($mainImage && $mainImage->path) {
                        $imageUrl = asset('storage/' . $mainImage->path);
                        $url->addImage($imageUrl, $translation->name);
                        $productWithImagesCount++;
                    }
                    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ <image:image>

                    $sitemap->add($url);
                    $productCount++;
                }
            }
        }

        $this->info("‚úì –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {$productCount}");
        $this->info("‚úì –ò–∑ –Ω–∏—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ: {$productWithImagesCount}");

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        $sitemap->writeToFile(public_path('sitemap.xml'));

        $this->info('üéâ Sitemap —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: public/sitemap.xml');
        $this->info("–í—Å–µ–≥–æ URL –≤ sitemap: " . count($sitemap->getTags()));

        return Command::SUCCESS;
    }
}
