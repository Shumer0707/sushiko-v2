// resources/js/Stores/cart.js
import { defineStore } from 'pinia'

export const useCartStore = defineStore('cart', {
    state: () => ({
        items: [], // –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        deliverySettings: {
            freeDeliveryThreshold: 500, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
            deliveryCost: 50, // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥
        },
    }),

    getters: {
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        totalItems: (state) => {
            return state.items.reduce((sum, item) => sum + item.quantity, 0)
        },

        // –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã
        totalPrice: (state) => {
            return state.items
                .reduce((sum, item) => {
                    return sum + item.product.price * item.quantity
                }, 0)
                .toFixed(2)
        },

        // –í–∞–ª—é—Ç–∞ (–±–µ—Ä—ë–º —É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –æ–±—ã—á–Ω–æ —É –≤—Å–µ—Ö –æ–¥–Ω–∞)
        currency: (state) => {
            return state.items[0]?.product?.currency || 'MDL'
        },

        // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞)
        deliveryCost: (state) => {
            const total = state.items.reduce((sum, item) => {
                return sum + item.product.price * item.quantity
            }, 0)

            // –ï—Å–ª–∏ —Å—É–º–º–∞ >= –ø–æ—Ä–æ–≥–∞ - –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            if (total >= state.deliverySettings.freeDeliveryThreshold) {
                return 0
            }

            return state.deliverySettings.deliveryCost
        },

        // –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞
        isFreeDelivery: (state) => {
            const total = state.items.reduce((sum, item) => {
                return sum + item.product.price * item.quantity
            }, 0)

            return total >= state.deliverySettings.freeDeliveryThreshold
        },

        // –°–∫–æ–ª—å–∫–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
        amountUntilFreeDelivery: (state) => {
            const total = state.items.reduce((sum, item) => {
                return sum + item.product.price * item.quantity
            }, 0)

            const remaining = state.deliverySettings.freeDeliveryThreshold - total

            return remaining > 0 ? remaining.toFixed(2) : 0
        },

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
        totalWithDelivery(state) {
            const subtotal = parseFloat(this.totalPrice)
            const delivery = this.deliveryCost

            return (subtotal + delivery).toFixed(2)
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        isInCart: (state) => (productId) => {
            return state.items.some((item) => item.product.id === productId)
        },

        // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        getCartItem: (state) => (productId) => {
            return state.items.find((item) => item.product.id === productId)
        },
    },

    actions: {
        // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        addToCart(product, quantity = 1, selectedAttributes = {}) {
            const existingItem = this.items.find((item) => item.product.id === product.id)

            if (existingItem) {
                existingItem.quantity += quantity
            } else {
                this.items.push({
                    product: {
                        id: product.id,
                        name: product.name,
                        slug: product.slug,
                        price: product.price,
                        currency: product.currency,
                        image_url: product.image_url,
                    },
                    quantity,
                    selectedAttributes,
                })
            }

            this.saveToStorage()
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:', product.name, 'x', quantity)
        },

        // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        removeFromCart(productId) {
            const index = this.items.findIndex((item) => item.product.id === productId)

            if (index !== -1) {
                const removedItem = this.items[index]
                this.items.splice(index, 1)
                this.saveToStorage()

                console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', removedItem.product.name)
            }
        },

        // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        updateQuantity(productId, quantity) {
            const item = this.items.find((item) => item.product.id === productId)

            if (item) {
                if (quantity <= 0) {
                    this.removeFromCart(productId)
                } else {
                    item.quantity = quantity
                    this.saveToStorage()

                    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', item.product.name, '‚Üí', quantity)
                }
            }
        },

        // –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
        incrementQuantity(productId) {
            const item = this.items.find((item) => item.product.id === productId)
            if (item) {
                item.quantity++
                this.saveToStorage()
            }
        },

        // –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
        decrementQuantity(productId) {
            const item = this.items.find((item) => item.product.id === productId)
            if (item) {
                if (item.quantity > 1) {
                    item.quantity--
                    this.saveToStorage()
                } else {
                    this.removeFromCart(productId)
                }
            }
        },

        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É
        clearCart() {
            this.items = []
            this.saveToStorage()
            console.log('üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
        },

        // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∫–∏)
        updateDeliverySettings(freeThreshold, cost) {
            this.deliverySettings.freeDeliveryThreshold = freeThreshold
            this.deliverySettings.deliveryCost = cost
        },

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
        saveToStorage() {
            try {
                localStorage.setItem('sushiko_cart', JSON.stringify(this.items))
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error)
            }
        },

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
        loadFromStorage() {
            try {
                const saved = localStorage.getItem('sushiko_cart')
                if (saved) {
                    this.items = JSON.parse(saved)
                    console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage:', this.items.length, '—Ç–æ–≤–∞—Ä–æ–≤')
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error)
                this.items = []
            }
        },
    },
})
