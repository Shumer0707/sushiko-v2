// resources/js/stores/cart.js
import { defineStore } from 'pinia'

export const useCartStore = defineStore('cart', {
    state: () => ({
        items: [], // –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ item: { product, quantity, selectedAttributes }
    }),

    getters: {
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        totalItems: (state) => {
            return state.items.reduce((sum, item) => sum + item.quantity, 0)
        },

        // –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã
        totalPrice: (state) => {
            return state.items.reduce((sum, item) => {
                return sum + item.product.price * item.quantity
            }, 0)
        },

        // –í–∞–ª—é—Ç–∞ (–±–µ—Ä—ë–º —É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –æ–±—ã—á–Ω–æ —É –≤—Å–µ—Ö –æ–¥–Ω–∞)
        currency: (state) => {
            return state.items[0]?.product?.currency || 'MDL'
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        isInCart: (state) => (productId) => {
            return state.items.some((item) => item.product.id === productId)
        },

        // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        getCartItem: (state) => (productId) => {
            return state.items.find((item) => item.product.id === productId)
        },
    },

    actions: {
        // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        addToCart(product, quantity = 1, selectedAttributes = {}) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
            const existingItem = this.items.find((item) => item.product.id === product.id)

            if (existingItem) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                existingItem.quantity += quantity
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                this.items.push({
                    product: {
                        id: product.id,
                        name: product.name,
                        slug: product.slug,
                        price: product.price,
                        currency: product.currency,
                        image_url: product.image_url,
                    },
                    quantity,
                    selectedAttributes, // –ù–∞–ø—Ä–∏–º–µ—Ä: { size: 'L', spicy: 'Hot' }
                })
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            this.saveToStorage()

            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:', product.name, 'x', quantity)
        },

        // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        removeFromCart(productId) {
            const index = this.items.findIndex((item) => item.product.id === productId)

            if (index !== -1) {
                const removedItem = this.items[index]
                this.items.splice(index, 1)
                this.saveToStorage()

                console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', removedItem.product.name)
            }
        },

        // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        updateQuantity(productId, quantity) {
            const item = this.items.find((item) => item.product.id === productId)

            if (item) {
                if (quantity <= 0) {
                    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ - —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
                    this.removeFromCart(productId)
                } else {
                    item.quantity = quantity
                    this.saveToStorage()

                    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', item.product.name, '‚Üí', quantity)
                }
            }
        },

        // –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
        incrementQuantity(productId) {
            const item = this.items.find((item) => item.product.id === productId)
            if (item) {
                item.quantity++
                this.saveToStorage()
            }
        },

        // –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
        decrementQuantity(productId) {
            const item = this.items.find((item) => item.product.id === productId)
            if (item) {
                if (item.quantity > 1) {
                    item.quantity--
                    this.saveToStorage()
                } else {
                    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–µ—Ç 0 - —É–¥–∞–ª—è–µ–º
                    this.removeFromCart(productId)
                }
            }
        },

        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É
        clearCart() {
            this.items = []
            this.saveToStorage()
            console.log('üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
        },

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
        saveToStorage() {
            try {
                localStorage.setItem('sushiko_cart', JSON.stringify(this.items))
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error)
            }
        },

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
        loadFromStorage() {
            try {
                const saved = localStorage.getItem('sushiko_cart')
                if (saved) {
                    this.items = JSON.parse(saved)
                    console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage:', this.items.length, '—Ç–æ–≤–∞—Ä–æ–≤')
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error)
                this.items = []
            }
        },
    },
})
